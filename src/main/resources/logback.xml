<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
	
	<!-- Declare properties used elsewhere in configuration: some static and some dynamically calculated
		See PropertyDefiner implementation for more info. -->
	
	<property name="LOG_FORMAT" value="%date{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %replace(%msg){'\s+$',''}%n" scope="context" />
	<!--<property name="LOG_FORMAT" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" scope="context" />-->
	<define name="LOG_DIR" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- path where log files are written -->
		<key>log.dir</key>
	</define>
	<define name="LOG_FILE_BASENAME" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- base log-file name -->
		<key>log.file.basename</key>
	</define>
	<define name="LOG_MAIN_TARGET" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- main log output target type [console | file] -->
		<key>log.main.target</key>
		<defaultValue>console</defaultValue>
	</define>
	<define name="LOG_MAIN_FILE_POLICY" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- main log file-policy type [simple | rolling] -->
		<key>log.main.file.policy</key>
	</define>
	<define name="LOG_AUTH_TARGET" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- auth log target type [none | file | syslog] -->
		<key>log.auth.target</key>
		<defaultValue>none</defaultValue>
	</define>
	<define name="OVERRIDE_DIR" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- path where to load configuration override file -->
		<key>override.dir</key>
	</define>
	<define name="SYSLOG_HOST" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- remote syslog server hostname -->
		<key>syslog.host</key>
		<defaultValue>localhost</defaultValue>
	</define>
	<define name="SYSLOG_PORT" class="com.sonicle.webtop.core.app.LogbackPropertyDefiner" scope="context">
		<!-- remote syslog server port -->
		<key>syslog.port</key>
		<defaultValue>514</defaultValue>
	</define>
	
	<!-- Define logging appenders -->
	<if condition='property("LOG_MAIN_TARGET").equals("file")'>
		<then>
			<!-- Define proper file-appender according to type: if 'simple' creates a straight
				file without any policies, otherwise (the 'rolling' case) define a file 
				appender using time-based policy with max-size cap. -->
			<if condition='property("LOG_MAIN_FILE_POLICY").equals("simple")'>
				<then>
					<appender name="webtop.application-main" class="ch.qos.logback.core.FileAppender">
						<file>${LOG_DIR}/${LOG_FILE_BASENAME}.log</file>
						<encoder>
							<charset>UTF-8</charset>
							<pattern>${LOG_FORMAT}</pattern>
						</encoder>
						<append>true</append>
						<immediateFlush>true</immediateFlush>
					</appender>
				</then>
				<else>
					<appender name="webtop.application-main" class="ch.qos.logback.core.rolling.RollingFileAppender">
						<file>${LOG_DIR}/${LOG_FILE_BASENAME}.log</file>
						<encoder>
							<charset>UTF-8</charset>
							<pattern>%date{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %replace(%msg){'\s+$',''}%n</pattern>
						</encoder>
						<!--
							RollingPolicy is responsible for the rollover procedure which involves file moving and renaming.
							You can choose between two different configurations:
							- TimeBasedRollingPolicy
								(like: webtop.2017-01-01.log, webtop.2017-01-02.log, and so on...)
							- FixedWindowRollingPolicy (in conjunction with triggeringPolicy)
								(like: webtop.1.log, webtop.2.log, and so on...)
							NB: keep only one 'rollingPolicy' uncommented at the same time!
						-->
						<!-- For TimeBasedRollingPolicy uncomment the following -->
						<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
							<fileNamePattern>${LOG_DIR}/${LOG_FILE_BASENAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
							<maxHistory>15</maxHistory>
							<totalSizeCap>150MB</totalSizeCap>
						</rollingPolicy>
						<!-- For FixedWindowRollingPolicy uncomment the following -->
						<!--
						<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
							<fileNamePattern>${LOG_DIR}/${LOG_FILE_BASENAME}.%i.log</fileNamePattern>
							<minIndex>1</minIndex>
							<maxIndex>15</maxIndex>
						</rollingPolicy>
						<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
							<maxFileSize>10MB</maxFileSize>
						</triggeringPolicy>
						-->
					</appender>
				</else>
			</if>
			
			<!-- Do not set levels here, only add appenders -->
			<root>
				<appender-ref ref="webtop.application-main"/>
			</root>
		</then>
		<else>
			<!-- If target is set to something different from 'file', we still want to have logging 
				visible redirecting all to system console. -->
			<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
				<encoder>
					<pattern>${LOG_FORMAT}</pattern>
				</encoder>
			</appender>
			
			<!-- Do not set levels here, only add appenders -->
			<root>
				<appender-ref ref="stdout"/>
			</root>
		</else>
	</if>
	<if condition='"file".equals(property("LOG_AUTH_TARGET"))'>
		<then>
			<appender name="webtop.application-auth" class="ch.qos.logback.core.FileAppender">
				<file>${LOG_DIR}/${LOG_FILE_BASENAME}_auth.log</file>
				<encoder>
					<charset>UTF-8</charset>
					<pattern>%date{yyyy-MM-dd HH:mm:ss} [%-5level] %replace(%msg){'\s+$',''}%n</pattern>
				</encoder>
				<append>true</append>
				<immediateFlush>true</immediateFlush>
			</appender>
		</then>
	</if>
	<if condition='"syslog".equals(property("LOG_AUTH_TARGET"))'>
		<then>
			<appender name="webtop.application-auth" class="ch.qos.logback.classic.net.SyslogAppender">
				<syslogHost>${SYSLOG_HOST}</syslogHost>
				<port>${SYSLOG_PORT}</port>
				<facility>AUTH</facility>
				<suffixPattern>[%-5level]%replace(%msg){'\s+$',''}%n</suffixPattern>
			</appender>
		</then>
	</if>
	
	<!-- Following is configuration for different logging levels. Please do *not* setup appenders here. That work
		should be done above, inside the <if/> directive, so that the correct appenders are added in all cases.
	-->
	<!-- Configuration for the root logger -->
	<root level="WARN"/>
	
	<!-- Third-party libraries and frameworks logging -->
	<logger name="ch.qos.logback" level="ERROR" />
	<logger name="com.zaxxer.hikari" level="ERROR" />
	<logger name="org.quartz" level="OFF" />
	<logger name="org.jooq" level="ERROR" />
	<logger name="org.apache.shiro" level="ERROR" />
	<logger name="org.atmosphere" level="ERROR" />
	<logger name="org.jivesoftware.smack" level="ERROR" />
	<logger name="org.glassfish.jersey" level="ERROR" />
	<logger name="io.swagger" level="ERROR" />
	<!-- Suppress noisy logging from jericho -->
	<logger name="net.htmlparser.jericho" level="OFF" />
	
	<!-- Our libraries logging -->
	<logger name="com.sonicle.security" level="ERROR" />
	<logger name="com.sonicle.commons" level="ERROR" />
	<logger name="com.sonicle.security" level="ERROR" />
	<logger name="com.sonicle.mail" level="ERROR" />
	<logger name="com.sonicle.vfs2" level="ERROR" />
	
	<!-- WebTop logging (auth) -->
	<logger name="com.sonicle.webtop.AuthLog" level="TRACE" additivity="false">
		<if condition='"file".equals(property("LOG_AUTH_TARGET")) || "syslog".equals(property("LOG_AUTH_TARGET"))'>
			<then>
				<appender-ref ref="webtop.application-auth" />
			</then>
		</if>
	</logger>
	
	<!-- WebTop logging (main) -->
	<logger name="com.sonicle.webtop.core" level="INFO" />
	<logger name="com.sonicle.webtop.core.job" level="ERROR" />
	<logger name="com.sonicle.webtop.core.bg" level="ERROR" />
	<logger name="com.sonicle.webtop.core.rest" level="ERROR" />
	<logger name="com.sonicle.webtop.core.app.SettingsManager" level="ERROR" />
	<logger name="com.sonicle.webtop.core.app.atmosphere" level="ERROR" />
	<logger name="com.sonicle.webtop.core.app.servlet" level="ERROR" />
	<logger name="com.sonicle.webtop.core.shiro" level="ERROR" />
	<logger name="com.sonicle.webtop.calendar" level="INFO" />
	<logger name="com.sonicle.webtop.calendar.bg" level="ERROR" />
	<logger name="com.sonicle.webtop.calendar.rest" level="ERROR" />
	<logger name="com.sonicle.webtop.contacts" level="INFO" />
	<logger name="com.sonicle.webtop.contacts.bg" level="ERROR" />
	<logger name="com.sonicle.webtop.contacts.rest" level="ERROR" />
	<logger name="com.sonicle.webtop.mail" level="INFO" />
	<logger name="com.sonicle.webtop.mail.bg" level="ERROR" />
	<logger name="com.sonicle.webtop.mail.job" level="ERROR" />
	<logger name="com.sonicle.webtop.mail.rest" level="ERROR" />
	<logger name="com.sonicle.webtop.tasks" level="INFO" />
	<logger name="com.sonicle.webtop.tasks.bg" level="ERROR" />
	<logger name="com.sonicle.webtop.tasks.rest" level="ERROR" />
	<logger name="com.sonicle.webtop.vfs" level="INFO" />
	<logger name="com.sonicle.webtop.drm" level="INFO" />
	
	<!-- Lastly, give customers the ability to define *their own* logback.xml which will be processed in
		addition to this one, giving them the ability to modify logging levels at will without forcing
		them to modify original files directly.
		
		WARNING: Do not use ${override.dir}-style property replacement here. Because the returned String is
		compiled into Java code by Janino internally, doing so causes backslashes to be removed on Windows
		and results in logback.xml not being included even if it is present. Calling property("override.dir")
		returns the same value but does so in a way that is safe to be compiled. -->
	<if condition='isDefined("OVERRIDE_DIR")'>
		<then>
			<if condition='new java.io.File(property("OVERRIDE_DIR"), "logback-override.xml").exists()'>
				<then>
					<include file="${OVERRIDE_DIR}/logback-override.xml"/>
				</then>
			</if>
		</then>
	</if>
	
</configuration>
